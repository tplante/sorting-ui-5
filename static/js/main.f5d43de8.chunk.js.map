{"version":3,"sources":["App.js","index.js"],"names":["SKIP_VALUE","options","label","reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","removed","Object","slicedToArray","getIndexFromId","string","parseInt","split","moveIconStyles","position","left","padding","concat","ICON_MARGIN","Icon","_ref","children","stroke","_ref$style","style","react_default","a","createElement","strokeWidth","strokeLinecap","strokeLinejoin","width","height","viewBox","ArrowIcon","App_Icon","points","d","PlusIcon","App","state","items","submitted","container","createRef","getPlaceholderItem","menuId","placeholderItem","objectSpread","id","length","_this","keyGenerationIndex","setOptions","choices","map","c","i","selected","showMovableIcon","val","setState","handleDragEnd","dragEvent","assertThisInitialized","current","destination","source","draggableId","menu","querySelector","menus","querySelectorAll","movedPlaceholderItem","value","destinationIndex","some","m","index","handleChange","event","target","_event$target","previousValue","toConsumableArray","find","o","push","forEach","item","handleDeselect","currentTarget","option","handleSubmit","this","_this2","isLastItem","ragnar_web_dist","ref","alignItems","maxWidth","mt","fontSize","fontWeight","textAlign","my","react_beautiful_dnd_esm","onDragEnd","droppableId","provided","innerRef","key","snapshot","assign","draggableProps","dragHandleProps","flexDirection","mb","GRID_SIZE","bg","isDragging","borderRadius","p","draggableStyle","userSelect","overflow","border","getItemStyles","App_ArrowIcon","htmlFor","color","justifyContent","mr","borderColor","App_PlusIcon","flex","name","onChange","pr","Option","defaultValue","disabled","_ref2","onClick","px","ragnar_visuals_dist","placeholder","React","PureComponent","renderer","createRenderer","renderStatic","reset","setup","keys","fonts","renderFont","files","ReactDOM","render","dist","theme","designSystemConfig","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f5d43de8.chunk.js","sourcesContent":["// @flow\nimport React, { createRef } from \"react\";\nimport {\n  Box,\n  BoxBorder,\n  Button,\n  Label,\n  Select,\n  Text\n} from \"@mentimeter/ragnar-web\";\nimport { CrossIcon } from \"@mentimeter/ragnar-visuals\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst SKIP_VALUE = \"skip\";\nconst PLACEHOLDER_VALUE = \"Select an option\";\nconst ICON_SIZE = 20;\nconst ICON_MARGIN = 10;\nconst GRID_SIZE = 20;\nconst GUTTER_SIZE = GRID_SIZE / 2;\nconst ITEM_SIZE = GRID_SIZE * 2;\nconst BORDER_WIDTH = 2;\nconst SHADE_2 = \"rgb(195, 200, 213)\";\nconst SHADE_3 = \"rgb(37, 43, 54)\";\n\nconst options = [\n  { label: \"Hillary Clinton\" },\n  { label: \"George Washington\" },\n  { label: \"Barack Obama\" },\n  { label: \"Bernie Sanders\" },\n  { label: \"John Adams\" },\n  { label: \"Marco Rubio\" },\n  { label: \"Donald Trump\" },\n  { label: \"Ron Swanson\" },\n  { label: \"Ron Burgandy\" },\n  { label: \"Abraham Lincoln\" },\n  { label: \"Jeb Bush\" },\n  { label: \"Kanye West\" }\n];\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\nconst getIndexFromId = string => parseInt(string.split(\"-\")[1]); // e.g., \"option-10\" -> \"10\"\nconst getItemStyles = (isDragging, draggableStyle, isLastItem) => ({\n  position: \"relative\",\n  userSelect: \"none\",\n  overflow: \"visible\",\n  border:\n    isDragging || isLastItem\n      ? `${BORDER_WIDTH}px dashed ${SHADE_2}`\n      : `${BORDER_WIDTH}px solid ${SHADE_2}`,\n  // Styles to apply on draggables\n  ...draggableStyle\n});\nconst moveIconStyles = {\n  position: \"absolute\",\n  left: -ICON_SIZE - ICON_MARGIN,\n  padding: `${GRID_SIZE}px ${ICON_MARGIN / 2}px`\n};\n\nconst Icon = ({ children, stroke, style = {} }) => (\n  <svg\n    stroke={stroke}\n    strokeWidth={BORDER_WIDTH}\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    width={ICON_SIZE}\n    height={ICON_SIZE}\n    viewBox={`0 0 ${ICON_SIZE} ${ICON_SIZE}`}\n    style={style}\n  >\n    {children}\n  </svg>\n);\n\nconst ArrowIcon = () => (\n  <Icon stroke={SHADE_3} style={moveIconStyles}>\n    <polyline points=\"3.7 7.3 1 10 3.7 12.7\" />\n    <polyline points=\"7.3 3.7 10 1 12.7 3.7\" />\n    <polyline points=\"12.7 16.3 10 19 7.3 16.3\" />\n    <polyline points=\"16.3 7.3 19 10 16.3 12.7\" />\n    <path d=\"M1,10 L19,10\" />\n    <path d=\"M10,1 L10,19\" />\n  </Icon>\n);\n\nconst PlusIcon = () => (\n  <Icon stroke=\"white\">\n    <path d=\"M1,10 L19,10\" />\n    <path d=\"M10,1 L10,19\" />\n  </Icon>\n);\n\nclass App extends React.PureComponent<Props, State> {\n  state = {\n    items: [],\n    options: [],\n    submitted: false\n  };\n\n  container = createRef();\n\n  componentDidMount() {\n    this.keyGenerationIndex = 1;\n    this.setOptions(options);\n  }\n\n  getPlaceholderItem = (options, menuId) => {\n    const placeholderItem = { ...options[menuId + 1] }; // Copy of next option, prevent mutation\n    placeholderItem.id = `option-${options.length + this.keyGenerationIndex}`;\n    this.keyGenerationIndex++;\n    return placeholderItem;\n  };\n\n  setOptions = choices => {\n    const options = choices.map((c, i) => ({\n      id: `option-${i}`,\n      label: c.label,\n      selected: false,\n      showMovableIcon: false,\n      val: SKIP_VALUE\n    }));\n    this.setState({\n      items: [options[0]], // Start with one option (select menu)\n      options\n    });\n  };\n\n  handleDragEnd = dragEvent => {\n    const {\n      container: { current: container }\n    } = this;\n    const { destination, source, draggableId } = dragEvent;\n    const menu = container.querySelector(`#${draggableId} select`);\n    // Convert NodeList to array\n    const menus = Array.from(container.querySelectorAll(\"select\"));\n    const movedPlaceholderItem = menu.value === SKIP_VALUE;\n    // Dropped outside the list or an empty option is not last index\n    if (!destination || movedPlaceholderItem) {\n      return;\n    }\n    const movedPastPlaceholderItem = menus.some(\n      (m, i) => m.value === SKIP_VALUE && destination.index === i\n    );\n    const destinationIndex = movedPastPlaceholderItem\n      ? destination.index - 1\n      : destination.index;\n    const items = reorder(this.state.items, source.index, destinationIndex);\n    this.setState({ items });\n  };\n\n  handleChange = event => {\n    const {\n      target,\n      target: { value, id, previousValue }\n    } = event;\n    const options = [...this.state.options]; // Prevent mutation\n    const items = [...this.state.items]; // Prevent mutation\n    // Option was selected before\n    if (previousValue) {\n      const previousOption = options.find(o => o.id === previousValue);\n      previousOption.selected = false;\n    }\n    // A non-default menu option was selected\n    if (value !== SKIP_VALUE) {\n      const option = options.find(o => o.id === value);\n      option.selected = true;\n      const menuId = getIndexFromId(id);\n      const selectedItem = items[menuId];\n      selectedItem.val = value;\n      const shouldAddItem =\n        items.length < options.length && menuId === items.length - 1; // Still menus left to append\n      if (shouldAddItem) {\n        const placeholderItem = this.getPlaceholderItem(options, menuId);\n        items.push(placeholderItem);\n      }\n      const itemsAreMoveable = items.length > 2; // Need 2 or more selected items for dnd to be useful\n      if (itemsAreMoveable) {\n        items.forEach(item => (item.showMovableIcon = item.val !== SKIP_VALUE));\n      }\n    }\n    target.previousValue = value;\n    this.setState({ options, items });\n  };\n\n  handleDeselect = event => {\n    const { id } = event.currentTarget; // Selects \"this\" element instead of any of its children\n    const options = [...this.state.options]; // Prevent mutation\n    const items = [...this.state.items]; // Prevent mutation\n    const menuId = getIndexFromId(id);\n    const itemId = getIndexFromId(items[menuId].val);\n    const option = options[itemId];\n    if (!option) {\n      return;\n    }\n    option.selected = false;\n    // Remove any extra deselected items from end of list\n    items.forEach((item, i) => {\n      if (i !== menuId && item.val === SKIP_VALUE) {\n        items.splice(i, 1);\n      }\n    });\n    // Move deselected item to end of list\n    const placeholderItem = this.getPlaceholderItem(options, menuId);\n    items.splice(menuId, 1);\n    items.push(placeholderItem);\n    this.setState({ options, items });\n  };\n\n  handleSubmit = () => {\n    this.setState({ submitted: !this.state.submitted });\n  };\n\n  render() {\n    const isLastItem = (item, index) =>\n      !item.showMovableIcon && // Not selected\n      index === this.state.items.length - 1 && // Last item\n      this.state.items.length !== 1; // More than one available option\n    return (\n      <Box ref={this.container} alignItems=\"center\">\n        <Box width=\"80%\" maxWidth=\"350px\">\n          <Box mt={4}>\n            <Text fontSize={4} fontWeight=\"bold\" textAlign=\"center\">\n              Choose your favorite candidates\n            </Text>\n          </Box>\n          <Box my={2}>\n            <Text\n              fontSize={1}\n            >{`Select as many as you want in the order you prefer.\n              There are ${options.length} options in total.`}</Text>\n          </Box>\n          <Box width=\"100%\" alignItems=\"center\">\n            <DragDropContext onDragEnd={this.handleDragEnd}>\n              <Droppable droppableId=\"droppable\">\n                {provided => (\n                  <Box ref={provided.innerRef} width=\"100%\">\n                    {this.state.items.map((item, i) => (\n                      <Draggable key={item.id} draggableId={item.id} index={i}>\n                        {(provided, snapshot) => (\n                          <BoxBorder\n                            id={item.id}\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            width=\"100%\"\n                            flexDirection=\"columns\"\n                            alignItems=\"center\"\n                            mb={GUTTER_SIZE}\n                            // Change background color if dragging\n                            bg={\n                              snapshot.isDragging || isLastItem(item, i)\n                                ? \"transparent\"\n                                : \"shade-2\"\n                            }\n                            borderRadius={1}\n                            p={`${GUTTER_SIZE}px 0 ${GUTTER_SIZE}px ${GUTTER_SIZE}px`}\n                            style={{\n                              ...getItemStyles(\n                                snapshot.isDragging,\n                                provided.draggableProps.style,\n                                isLastItem(item, i)\n                              )\n                            }}\n                          >\n                            {!isLastItem(item, i) &&\n                              item.showMovableIcon && <ArrowIcon />}\n                            <Label\n                              value={isLastItem(item, i) ? \"+\" : i + 1}\n                              htmlFor={`menu-${i}`}\n                              color=\"white\"\n                              mt={1}\n                              fontWeight=\"bold\"\n                            >\n                              <BoxBorder\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                                width={ITEM_SIZE}\n                                height={ITEM_SIZE}\n                                bg={isLastItem(item, i) ? \"shade-2\" : \"brand\"}\n                                mr={GUTTER_SIZE}\n                                borderRadius=\"50%\"\n                                border=\"2px solid\"\n                                borderColor=\"gray\"\n                              >\n                                {isLastItem(item, i) ? <PlusIcon /> : i + 1}\n                              </BoxBorder>\n                            </Label>\n                            <Box flex={1}>\n                              <Select\n                                id={`menu-${i}`}\n                                name={`menu-${i}`}\n                                onChange={this.handleChange}\n                                pr=\"20px\"\n                              >\n                                <Select.Option\n                                  id={SKIP_VALUE}\n                                  value={SKIP_VALUE}\n                                  defaultValue\n                                  disabled={item.val !== SKIP_VALUE}\n                                >\n                                  {PLACEHOLDER_VALUE}\n                                </Select.Option>\n                                {this.state.options.map(\n                                  ({ label, id, selected }) =>\n                                    (!selected || item.val === id) && (\n                                      <Select.Option\n                                        key={id}\n                                        id={id}\n                                        value={id}\n                                      >\n                                        {label}\n                                      </Select.Option>\n                                    )\n                                )}\n                              </Select>\n                            </Box>\n                            <Box\n                              id={`deselect-${i}`}\n                              onClick={this.handleDeselect}\n                              px={2}\n                            >\n                              {!isLastItem(item, i) &&\n                                this.state.items.length > 1 && <CrossIcon />}\n                            </Box>\n                          </BoxBorder>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </Box>\n                )}\n              </Droppable>\n            </DragDropContext>\n            <Box my={3}>\n              <Button onClick={this.handleSubmit}>\n                {this.state.submitted ? \"Nice!\" : \"Submit\"}\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  createRenderer,\n  Provider,\n  ThemeProvider,\n} from '@mentimeter/ragnar-react';\nimport { designSystemConfig } from '@mentimeter/ragnar-dsc';\nimport * as fonts from '@mentimeter/ragnar-fonts';\nimport { reset, setup } from '@mentimeter/ragnar-reset';\nimport App from './App';\n\nconst renderer = createRenderer();\nrenderer.renderStatic(reset(setup(`body, #root`)));\n\nObject.keys(fonts).forEach(key => {\n  renderer.renderFont('Gilroy', fonts[key].files, fonts[key].style);\n});\n\nReactDOM.render(\n  <Provider renderer={renderer}>\n    <ThemeProvider theme={designSystemConfig}>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}