{"version":3,"sources":["App.js","index.js"],"names":["SKIP_VALUE","choices","label","optionId","reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","removed","Object","slicedToArray","getIndexFromId","string","parseInt","split","moveIconStyles","position","left","padding","concat","ICON_MARGIN","Icon","_ref","children","stroke","_ref$style","style","react_default","a","createElement","strokeWidth","strokeLinecap","strokeLinejoin","width","height","viewBox","MoveIcon","App_Icon","points","d","PlusIcon","App","state","items","options","submitted","container","createRef","getPlaceholderItem","menuId","placeholderItem","objectSpread","id","length","_this","keyGenerationIndex","setOptions","map","c","i","selected","showMovableIcon","val","setState","handleDragEnd","dragEvent","assertThisInitialized","current","destination","source","draggableId","menu","querySelector","menus","querySelectorAll","movedPlaceholderItem","value","destinationIndex","some","m","index","handleChange","event","target","_event$target","previousValue","toConsumableArray","find","o","selectedItem","push","forEach","item","handleDeselect","currentTarget","option","handleSubmit","ids","this","_this2","isLastItem","ragnar_web_dist","ref","alignItems","maxWidth","mt","fontSize","fontWeight","textAlign","my","react_beautiful_dnd_esm","onDragEnd","droppableId","provided","innerRef","key","snapshot","assign","draggableProps","dragHandleProps","flexDirection","mb","GRID_SIZE","bg","isDragging","borderRadius","p","draggableStyle","userSelect","overflow","border","getItemStyles","App_MoveIcon","htmlFor","color","justifyContent","mr","borderColor","App_PlusIcon","flex","name","onChange","pr","Option","defaultValue","disabled","_ref2","onClick","px","ragnar_visuals_dist","placeholder","React","PureComponent","renderer","createRenderer","renderStatic","reset","setup","keys","fonts","renderFont","files","ReactDOM","render","dist","theme","designSystemConfig","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4ed2ad87.chunk.js","sourcesContent":["// @flow\nimport React, { createRef } from \"react\";\nimport {\n  Box,\n  BoxBorder,\n  Button,\n  Label,\n  Select,\n  Text\n} from \"@mentimeter/ragnar-web\";\nimport { CrossIcon } from \"@mentimeter/ragnar-visuals\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst QUESTION_ID = \"35b5f7a09224\"; // TODO: replace with question id from props\nconst SKIP_VALUE = \"skip\";\nconst PLACEHOLDER_VALUE = \"Select an option\";\nconst ICON_SIZE = 20;\nconst ICON_MARGIN = 10;\nconst GRID_SIZE = 20;\nconst GUTTER_SIZE = GRID_SIZE / 2;\nconst ITEM_SIZE = GRID_SIZE * 2;\nconst BORDER_WIDTH = 2;\nconst SHADE_2 = \"rgb(195, 200, 213)\"; // TODO: get from design system\nconst SHADE_3 = \"rgb(37, 43, 54)\"; // TODO: get from design system\n\n// TODO: replace with choices from props\nconst choices = [\n  { label: \"Hillary Clinton\", optionId: 0 },\n  { label: \"George Washington\", optionId: 1 },\n  { label: \"Barack Obama\", optionId: 2 },\n  { label: \"Bernie Sanders\", optionId: 3 },\n  { label: \"John Adams\", optionId: 4 },\n  { label: \"Marco Rubio\", optionId: 5 },\n  { label: \"Donald Trump\", optionId: 6 },\n  { label: \"Ron Swanson\", optionId: 7 },\n  { label: \"Ron Burgandy\", optionId: 8 },\n  { label: \"Abraham Lincoln\", optionId: 9 },\n  { label: \"Jeb Bush\", optionId: 10 },\n  { label: \"Kanye West\", optionId: 11 }\n];\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\nconst getIndexFromId = string => parseInt(string.split(\"-\")[1]); // e.g., \"option-10\" -> \"10\"\nconst getItemStyles = (isDragging, draggableStyle, isLastItem) => ({\n  position: \"relative\",\n  userSelect: \"none\",\n  overflow: \"visible\",\n  border:\n    isDragging || isLastItem\n      ? `${BORDER_WIDTH}px dashed ${SHADE_2}`\n      : `${BORDER_WIDTH}px solid ${SHADE_2}`,\n  // Styles to apply on draggables\n  ...draggableStyle\n});\nconst moveIconStyles = {\n  position: \"absolute\",\n  left: -ICON_SIZE - ICON_MARGIN,\n  padding: `${ICON_SIZE}px ${ICON_MARGIN / 2}px`\n};\n\n// TODO: remove somehow\nconst Icon = ({ children, stroke, style = {} }) => (\n  <svg\n    stroke={stroke}\n    strokeWidth={BORDER_WIDTH}\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    width={ICON_SIZE}\n    height={ICON_SIZE}\n    viewBox={`0 0 ${ICON_SIZE} ${ICON_SIZE}`}\n    style={style}\n  >\n    {children}\n  </svg>\n);\n\n// TODO: move to ragnar-visuals\nconst MoveIcon = () => (\n  <Icon stroke={SHADE_3} style={moveIconStyles}>\n    <polyline points=\"3.7 7.3 1 10 3.7 12.7\" />\n    <polyline points=\"7.3 3.7 10 1 12.7 3.7\" />\n    <polyline points=\"12.7 16.3 10 19 7.3 16.3\" />\n    <polyline points=\"16.3 7.3 19 10 16.3 12.7\" />\n    <path d=\"M1,10 L19,10\" />\n    <path d=\"M10,1 L10,19\" />\n  </Icon>\n);\n\n// TODO: move to ragnar-visuals\nconst PlusIcon = () => (\n  <Icon stroke=\"white\">\n    <path d=\"M1,10 L19,10\" />\n    <path d=\"M10,1 L10,19\" />\n  </Icon>\n);\n\nclass App extends React.PureComponent<Props, State> {\n  state = {\n    items: [],\n    options: [],\n    submitted: false // TODO: remove\n  };\n\n  container = createRef();\n\n  componentDidMount() {\n    this.keyGenerationIndex = 1;\n    this.setOptions();\n  }\n\n  getPlaceholderItem = (options, menuId) => {\n    const placeholderItem = { ...options[menuId + 1] }; // Copy of next option, prevent mutation\n    placeholderItem.id = `option-${options.length + this.keyGenerationIndex}`;\n    this.keyGenerationIndex++; // Prevent duplicate keys when elements are deleted and re-added\n    return placeholderItem;\n  };\n\n  setOptions = () => {\n    const options = choices.map((c, i) => ({\n      id: `option-${i}`,\n      optionId: c.optionId,\n      label: c.label,\n      selected: false,\n      showMovableIcon: false,\n      val: SKIP_VALUE\n    }));\n    this.setState({\n      items: [options[0]], // Start with one option (select menu)\n      options\n    });\n  };\n\n  handleDragEnd = dragEvent => {\n    const {\n      container: { current: container }\n    } = this;\n    const { destination, source, draggableId } = dragEvent;\n    const menu = container.querySelector(`#${draggableId} select`);\n    // Convert NodeList to array\n    const menus = Array.from(container.querySelectorAll(\"select\"));\n    const movedPlaceholderItem = menu.value === SKIP_VALUE;\n    // Dropped outside the list or an empty option is not last index\n    if (!destination || movedPlaceholderItem) {\n      return;\n    }\n    // No item can be moved past the last item when it still has the placeholder value\n    const movedPastPlaceholderItem = menus.some(\n      (m, i) => m.value === SKIP_VALUE && destination.index === i\n    );\n    const destinationIndex = movedPastPlaceholderItem\n      ? destination.index - 1 // Update destination to second to last\n      : destination.index;\n    const items = reorder(this.state.items, source.index, destinationIndex);\n    this.setState({ items });\n  };\n\n  handleChange = event => {\n    const {\n      target,\n      target: { value, id, previousValue }\n    } = event;\n    const options = [...this.state.options]; // Copy state to prevent mutation\n    const items = [...this.state.items];\n    // Option was selected before\n    if (previousValue) {\n      const previousOption = options.find(o => o.id === previousValue);\n      previousOption.selected = false;\n    }\n    // A non-default menu option was selected\n    if (value !== SKIP_VALUE) {\n      const option = options.find(o => o.id === value);\n      option.selected = true;\n      const menuId = getIndexFromId(id);\n      const optionId = getIndexFromId(value);\n      const selectedItem = items[menuId];\n      selectedItem.val = value;\n      selectedItem.optionId = optionId;\n      const shouldAddItem =\n        items.length < options.length && menuId === items.length - 1; // Still menus left to append\n      if (shouldAddItem) {\n        const placeholderItem = this.getPlaceholderItem(options, menuId);\n        items.push(placeholderItem);\n      }\n      const itemsAreMoveable = items.length > 2; // Need 2 or more selected items for dnd to be useful\n      if (itemsAreMoveable) {\n        items.forEach(item => (item.showMovableIcon = item.val !== SKIP_VALUE));\n      }\n    }\n    target.previousValue = value;\n    this.setState({ options, items });\n  };\n\n  handleDeselect = event => {\n    const { id } = event.currentTarget; // currentTarget selects \"this\" element instead of any of its children\n    const options = [...this.state.options]; // Prevent mutation\n    const items = [...this.state.items]; // Prevent mutation\n    const menuId = getIndexFromId(id);\n    const itemId = getIndexFromId(items[menuId].val);\n    const option = options[itemId];\n    if (!option) {\n      return;\n    }\n    option.selected = false;\n    // Remove any extra deselected items from end of list\n    items.forEach((item, i) => {\n      if (i !== menuId && item.val === SKIP_VALUE) {\n        items.splice(i, 1);\n      }\n    });\n    // Move deselected item to end of list\n    const placeholderItem = this.getPlaceholderItem(options, menuId);\n    items.splice(menuId, 1);\n    items.push(placeholderItem);\n    this.setState({ options, items });\n  };\n\n  handleSubmit = () => {\n    const ids = [];\n    this.state.items.forEach(item => {\n      if (item.val !== SKIP_VALUE) {\n        ids.push(item.optionId);\n      }\n    });\n    // TODO: submit with form\n    const payload = {\n      question: QUESTION_ID,\n      question_type: \"ranking\",\n      vote: ids\n    };\n    this.setState({ submitted: !this.state.submitted }); // TODO: remove\n  };\n\n  render() {\n    const isLastItem = (item, index) =>\n      !item.showMovableIcon && // Not selected\n      index === this.state.items.length - 1 && // Last item\n      this.state.items.length !== 1; // More than one available option\n    return (\n      <Box ref={this.container} alignItems=\"center\">\n        <Box width=\"80%\" maxWidth=\"350px\">\n          <Box mt={4}>\n            <Text fontSize={4} fontWeight=\"bold\" textAlign=\"center\">\n              Choose your favorite candidates\n            </Text>\n          </Box>\n          <Box my={2}>\n            <Text\n              fontSize={1}\n            >{`Select as many as you want in the order you prefer.\n              There are ${choices.length} options in total.`}</Text>\n          </Box>\n          <Box width=\"100%\" alignItems=\"center\">\n            <DragDropContext onDragEnd={this.handleDragEnd}>\n              <Droppable droppableId=\"droppable\">\n                {provided => (\n                  <Box ref={provided.innerRef} width=\"100%\">\n                    {this.state.items.map((item, i) => (\n                      <Draggable key={item.id} draggableId={item.id} index={i}>\n                        {(provided, snapshot) => (\n                          <BoxBorder\n                            id={item.id}\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            width=\"100%\"\n                            flexDirection=\"columns\"\n                            alignItems=\"center\"\n                            mb={GUTTER_SIZE}\n                            // Change background color if dragging\n                            bg={\n                              snapshot.isDragging || isLastItem(item, i)\n                                ? \"transparent\"\n                                : \"shade-2\"\n                            }\n                            borderRadius={1}\n                            p={`${GUTTER_SIZE}px 0 ${GUTTER_SIZE}px ${GUTTER_SIZE}px`}\n                            style={{\n                              ...getItemStyles(\n                                snapshot.isDragging,\n                                provided.draggableProps.style,\n                                isLastItem(item, i)\n                              )\n                            }}\n                          >\n                            {!isLastItem(item, i) &&\n                              item.showMovableIcon && <MoveIcon />}\n                            <Label\n                              value={isLastItem(item, i) ? \"+\" : i + 1}\n                              htmlFor={`menu-${i}`}\n                              color=\"white\"\n                              mt={1}\n                              fontWeight=\"bold\"\n                            >\n                              <BoxBorder\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                                width={ITEM_SIZE}\n                                height={ITEM_SIZE}\n                                bg={isLastItem(item, i) ? \"shade-2\" : \"brand\"}\n                                mr={GUTTER_SIZE}\n                                borderRadius=\"50%\"\n                                border=\"2px solid\"\n                                borderColor=\"gray\"\n                              >\n                                {isLastItem(item, i) ? <PlusIcon /> : i + 1}\n                              </BoxBorder>\n                            </Label>\n                            <Box flex={1}>\n                              <Select\n                                id={`menu-${i}`}\n                                name={`menu-${i}`}\n                                onChange={this.handleChange}\n                                pr=\"20px\"\n                              >\n                                <Select.Option\n                                  id={SKIP_VALUE}\n                                  value={SKIP_VALUE}\n                                  defaultValue\n                                  disabled={item.val !== SKIP_VALUE}\n                                >\n                                  {PLACEHOLDER_VALUE}\n                                </Select.Option>\n                                {this.state.options.map(\n                                  ({ label, id, selected }) =>\n                                    (!selected || item.val === id) && (\n                                      <Select.Option\n                                        key={id}\n                                        id={id}\n                                        value={id}\n                                      >\n                                        {label}\n                                      </Select.Option>\n                                    )\n                                )}\n                              </Select>\n                            </Box>\n                            <Box\n                              id={`deselect-${i}`}\n                              onClick={this.handleDeselect}\n                              px={2}\n                            >\n                              {!isLastItem(item, i) &&\n                                this.state.items.length > 1 && <CrossIcon />}\n                            </Box>\n                          </BoxBorder>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </Box>\n                )}\n              </Droppable>\n            </DragDropContext>\n            <Box my={3}>\n              <Button onClick={this.handleSubmit}>\n                {this.state.submitted ? \"Nice!\" : \"Submit\"}\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  createRenderer,\n  Provider,\n  ThemeProvider,\n} from '@mentimeter/ragnar-react';\nimport { designSystemConfig } from '@mentimeter/ragnar-dsc';\nimport * as fonts from '@mentimeter/ragnar-fonts';\nimport { reset, setup } from '@mentimeter/ragnar-reset';\nimport App from './App';\n\nconst renderer = createRenderer();\nrenderer.renderStatic(reset(setup(`body, #root`)));\n\nObject.keys(fonts).forEach(key => {\n  renderer.renderFont('Gilroy', fonts[key].files, fonts[key].style);\n});\n\nReactDOM.render(\n  <Provider renderer={renderer}>\n    <ThemeProvider theme={designSystemConfig}>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}