{"version":3,"sources":["App.js","index.js"],"names":["SKIP_VALUE","options","label","reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","removed","Object","slicedToArray","iconStyles","opacity","transition","position","left","top","width","height","viewBox","concat","fill","optionStyles","display","justifyContent","fontWeight","cursor","borderRadius","margin","GRID_SIZE","padding","ArrowIcon","_ref","show","react","style","objectSpread","d","id","App","state","items","submitted","container","createRef","setOptions","choices","map","c","i","selected","showMovableIcon","val","_this","setState","handleDragEnd","dragEvent","assertThisInitialized","current","destination","source","draggableId","menu","querySelector","menus","querySelectorAll","preventReorder","value","some","m","index","handleChange","event","target","_event$target","previousValue","toConsumableArray","menuId","parseInt","split","hasPreviousValue","find","o","item","push","optionIndex","findIndex","length","forEach","handleSubmit","this","_this2","ref","ragnar_web_dist","maxWidth","my","alignItems","color","fontSize","textAlign","react_beautiful_dnd_esm","onDragEnd","droppableId","provided","snapshot","innerRef","key","assign","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","background","App_ArrowIcon","bg","mr","htmlFor","mt","flex","name","onChange","Option","defaultValue","_ref2","placeholder","React","renderer","createRenderer","renderStatic","reset","setup","keys","fonts","renderFont","files","ReactDOM","render","react_default","a","createElement","dist","theme","designSystemConfig","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.fa6d9fb4.chunk.js","sourcesContent":["// @flow\nimport * as React from \"react\";\nimport { createRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// Redux\nimport { Box, BoxBorder, Label, Select, Text } from \"@mentimeter/ragnar-web\";\n\nconst SKIP_VALUE = \"skip\";\nconst ICON_SIZE = 25;\nconst GRID_SIZE = 20;\nconst GUTTER_SIZE = GRID_SIZE / 2;\nconst ITEM_SIZE = GRID_SIZE * 2;\n\nconst options = [\n  { label: \"Hillary Clinton\" },\n  { label: \"George Washington\" },\n  { label: \"Barack Obama\" },\n  { label: \"Bernie Sanders\" },\n  { label: \"John Adams\" },\n  { label: \"Marco Rubio\" },\n  { label: \"Donald Trump\" },\n  { label: \"Ron Swanson\" },\n  { label: \"Ron Burgandy\" },\n  { label: \"Abraham Lincoln\" },\n  { label: \"Jeb Bush\" },\n  { label: \"Kanye West\" }\n];\n\n// Reorder the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  position: \"relative\",\n  userSelect: \"none\",\n  padding: GRID_SIZE,\n  margin: `0 0 ${GUTTER_SIZE}px 0`,\n  // Change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"#d8d8d8\",\n  // Styles to apply on draggables\n  ...draggableStyle\n});\nconst iconStyles = {\n  opacity: 0,\n  transition: \"0.2s ease-in-out\",\n  position: \"absolute\",\n  left: -ICON_SIZE,\n  top: GRID_SIZE,\n  width: ICON_SIZE,\n  height: ICON_SIZE,\n  viewBox: `0 0 ${ICON_SIZE} ${ICON_SIZE}`,\n  fill: \"#2c5c6c\"\n};\nconst optionStyles = {\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  fontWeight: \"bold\",\n  cursor: \"pointer\",\n  borderRadius: 3,\n  margin: `${GUTTER_SIZE}px ${GRID_SIZE}px 0 ${GRID_SIZE}px`,\n  padding: `${GUTTER_SIZE}px ${GRID_SIZE}px ${GUTTER_SIZE}px ${GUTTER_SIZE}px`\n};\n\nconst ArrowIcon = ({ show }) => {\n  return (\n    <svg\n      style={{\n        ...iconStyles,\n        opacity: show ? 1 : 0\n      }}\n    >\n      <path\n        d=\"M13.7578943,16.6318165 L10.6642975,19.7254012 C10.2981644,20.0915329 9.70460909,20.0915329 9.33847592,19.7254012 L6.24487915,16.6318165 C5.65429263,16.0412323 6.07257429,15.0313915 6.90780948,15.0314306 L8.90632706,15.0314306 L8.90628799,11.0937468 L4.9686279,11.0937468 L4.9686279,13.0922566 C4.9686279,13.9274885 3.95882223,14.3457685 3.36819665,13.7551843 L0.274599878,10.6615996 C-0.0915332925,10.2954679 -0.0915332925,9.70187587 0.274599878,9.3357832 L3.36819665,6.24219851 C3.95878316,5.6516143 4.9686279,6.06989433 4.9686279,6.90512625 L4.9686279,8.9062532 L8.90628799,8.9062532 L8.90628799,4.96860849 L6.90511417,4.96860849 C6.06987897,4.96860849 5.65159732,3.95880676 6.24218383,3.36818349 L9.3357806,0.274598805 C9.70191377,-0.091532935 10.295469,-0.091532935 10.6616022,0.274598805 L13.755199,3.36818349 C14.3457855,3.9587677 13.9275038,4.96860849 13.0922686,4.96860849 L11.0937511,4.96860849 L11.0937511,8.9062532 L15.0314112,8.9062532 L15.0314112,6.90774343 C15.0314112,6.07251151 16.0412168,5.65423148 16.6318034,6.24481569 L19.7254001,9.33840038 C20.0915333,9.70453212 20.0915333,10.2981241 19.7254001,10.6642168 L16.6318034,13.7578015 C16.0412168,14.3483857 15.0313721,13.9301057 15.0314112,13.0948737 L15.0314112,11.0937468 L11.0937901,11.0937468 L11.0937901,15.0313915 L13.094964,15.0313915 C13.9301992,15.0313915 14.3484808,16.0411932 13.7578943,16.6318165 Z\"\n        id=\"Path\"\n      />\n    </svg>\n  );\n};\n\nclass App extends React.PureComponent<Props, State> {\n  state = {\n    items: [],\n    options: [],\n    submitted: false\n  };\n\n  container = createRef();\n\n  componentDidMount() {\n    this.setOptions(options);\n  }\n\n  setOptions = choices => {\n    const options = choices.map((c, i) => ({\n      id: `option-${i}`,\n      label: c.label,\n      selected: false,\n      showMovableIcon: false,\n      val: SKIP_VALUE\n    }));\n    this.setState({\n      items: [options[0]], // Start with one option (select menu)\n      options\n    });\n  };\n\n  handleDragEnd = dragEvent => {\n    const {\n      container: { current: container }\n    } = this;\n    const { destination, source, draggableId } = dragEvent;\n    const menu = container.querySelector(`#${draggableId} select`);\n    // Convert NodeList to array\n    const menus = Array.from(container.querySelectorAll(\"select\"));\n    const preventReorder =\n      menu.value === SKIP_VALUE ||\n      menus.some(\n        (m, i) =>\n          m.value === SKIP_VALUE && destination && destination.index === i\n      );\n    // Dropped outside the list or an empty option is not last index\n    if (!destination || preventReorder) {\n      return;\n    }\n    const items = reorder(this.state.items, source.index, destination.index);\n    this.setState({ items });\n  };\n\n  handleChange = event => {\n    const {\n      target,\n      target: { value, previousValue, id }\n    } = event;\n    const {\n      container: { current: container }\n    } = this;\n    // Immutable state\n    const options = [...this.state.options];\n    const items = [...this.state.items];\n    const menus = container.querySelectorAll(\"select\");\n    const menuId = parseInt(id.split(\"-\")[1]); // e.g., \"option-10\" -> \"10\"\n    const hasPreviousValue = previousValue && previousValue !== SKIP_VALUE;\n    // Menu was selected before\n    if (hasPreviousValue) {\n      const previousOption = options.find(o => o.id === previousValue);\n      previousOption.selected = false;\n      // Option was deselected\n      if (value === SKIP_VALUE) {\n        const item = items[menuId];\n        item.showMovableIcon = false;\n        item.val = SKIP_VALUE;\n        // Move deselected item to end of list\n        items.splice(menuId, 1);\n        items.push(item);\n      }\n    }\n    // A non-default menu option was selected\n    if (value !== SKIP_VALUE) {\n      const optionIndex = options.findIndex(o => o.id === value);\n      options[optionIndex].selected = true;\n      items[menuId].showMovableIcon = true;\n      items[menuId].val = value;\n      const shouldAddItem =\n        !hasPreviousValue && // Was not selected before\n        menus.length < options.length && // Still menus left to append\n        menuId === items.length - 1; // Is the last menu item currently rendered\n      if (shouldAddItem) {\n        items.push(options[menuId + 1]);\n      }\n      menus.forEach((menu, i) => {\n        const previousMenuWasSkipped = menu.value === SKIP_VALUE && i < menuId;\n        // Selected an option but an earlier menu is set to default value\n        if (previousMenuWasSkipped) {\n          const item = items[i];\n          // Rearrange items, send unselected item to end of list\n          items.splice(i, 1);\n          items.push(item);\n        }\n      });\n    }\n    target.previousValue = value;\n    this.setState({ options, items });\n  };\n\n  handleSubmit = () => {\n    this.setState({ submitted: !this.state.submitted });\n  };\n\n  render() {\n    return (\n      <div ref={this.container}>\n        <Box width=\"100%\" height=\"100%\" maxWidth=\"450px\" m=\"0 auto\">\n          <Box my={2} alignItems=\"center\">\n            <Text\n              color=\"brand\"\n              fontSize={5}\n              fontWeight=\"bold\"\n              textAlign=\"center\"\n            >\n              Choose your favorite candidates\n            </Text>\n          </Box>\n          <Box width=\"100%\" alignItems=\"center\">\n            <DragDropContext onDragEnd={this.handleDragEnd}>\n              <Droppable droppableId=\"droppable\">\n                {(provided, snapshot) => (\n                  <div ref={provided.innerRef}>\n                    {this.state.items.map((item, i) => (\n                      <Draggable key={item.id} draggableId={item.id} index={i}>\n                        {(provided, snapshot) => (\n                          <div\n                            id={item.id}\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            style={{\n                              ...getItemStyle(\n                                snapshot.isDragging,\n                                provided.draggableProps.style\n                              ),\n                              ...optionStyles\n                            }}\n                          >\n                            {i < this.state.items.length && (\n                              <ArrowIcon show={item.showMovableIcon} />\n                            )}\n                            <BoxBorder\n                              alignItems=\"center\"\n                              justifyContent=\"center\"\n                              width={ITEM_SIZE}\n                              height={ITEM_SIZE}\n                              bg=\"brand\"\n                              mr={GUTTER_SIZE}\n                              borderRadius=\"50%\"\n                            >\n                              <Label\n                                value={i + 1}\n                                htmlFor={`menu-${i}`}\n                                color=\"white\"\n                                mt={1}\n                              >\n                                {i + 1}\n                              </Label>\n                            </BoxBorder>\n                            <Box\n                              flex={1}\n                              alignItems=\"center\"\n                              justifyContent=\"center\"\n                            >\n                              <Select\n                                id={`menu-${i}`}\n                                name={`menu-${i}`}\n                                onChange={this.handleChange}\n                              >\n                                <Select.Option\n                                  id={SKIP_VALUE}\n                                  value={SKIP_VALUE}\n                                  defaultValue\n                                >\n                                  Select an option\n                                </Select.Option>\n                                {this.state.options.map(\n                                  ({ label, id, selected }) =>\n                                    (!selected || item.val === id) && (\n                                      <Select.Option\n                                        key={id}\n                                        id={id}\n                                        value={id}\n                                      >\n                                        {label}\n                                      </Select.Option>\n                                    )\n                                )}\n                              </Select>\n                            </Box>\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n          </Box>\n        </Box>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  createRenderer,\n  Provider,\n  ThemeProvider,\n} from '@mentimeter/ragnar-react';\nimport { designSystemConfig } from '@mentimeter/ragnar-dsc';\nimport * as fonts from '@mentimeter/ragnar-fonts';\nimport { reset, setup } from '@mentimeter/ragnar-reset';\nimport App from './App';\n\nconst renderer = createRenderer();\nrenderer.renderStatic(reset(setup(`body, #root`)));\n\nObject.keys(fonts).forEach(key => {\n  renderer.renderFont('Gilroy', fonts[key].files, fonts[key].style);\n});\n\nReactDOM.render(\n  <Provider renderer={renderer}>\n    <ThemeProvider theme={designSystemConfig}>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}