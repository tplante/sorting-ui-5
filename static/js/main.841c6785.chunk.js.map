{"version":3,"sources":["App.js","index.js"],"names":["SKIP_VALUE","options","label","reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","removed","Object","slicedToArray","iconStyles","width","height","viewBox","concat","moveIconStyles","objectSpread","position","left","top","stroke","plusIconStyles","optionStyles","display","justifyContent","fontWeight","cursor","borderRadius","margin","GRID_SIZE","padding","ArrowIcon","_ref","show","react","strokeWidth","strokeLinecap","strokeLinejoin","style","opacity","points","d","PlusIcon","App","state","items","submitted","container","createRef","setOptions","choices","map","c","i","id","selected","showMovableIcon","val","_this","setState","handleDragEnd","dragEvent","assertThisInitialized","current","destination","source","draggableId","menu","querySelector","menus","querySelectorAll","preventReorder","value","some","m","index","handleChange","event","_event$target","target","toConsumableArray","menuId","parseInt","split","selectedItem","find","o","length","newItem","getNewItem","push","forEach","item","keyGenerationIndex","handleDeselect","currentTarget","option","handleSubmit","this","_this2","isLastItem","ref","ragnar_web_dist","maxWidth","my","alignItems","fontSize","textAlign","react_beautiful_dnd_esm","onDragEnd","droppableId","provided","snapshot","innerRef","key","assign","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","background","border","getItemStyle","App_ArrowIcon","htmlFor","color","mt","bg","mr","App_PlusIcon","flex","name","onChange","pr","Option","defaultValue","disabled","_ref2","onClick","px","ragnar_visuals_dist","placeholder","onSubmit","React","renderer","createRenderer","renderStatic","reset","setup","keys","fonts","renderFont","files","ReactDOM","render","react_default","a","createElement","dist","theme","designSystemConfig","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.841c6785.chunk.js","sourcesContent":["// @flow\nimport * as React from \"react\";\nimport { createRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// Redux\nimport {\n  Box,\n  BoxBorder,\n  Button,\n  Label,\n  Select,\n  Text\n} from \"@mentimeter/ragnar-web\";\nimport { CrossIcon } from \"@mentimeter/ragnar-visuals\";\n\nconst SKIP_VALUE = \"skip\";\nconst DEFAULT_OPTION = \"Select an option\";\nconst ICON_SIZE = 20;\nconst ICON_MARGIN = 5;\nconst GRID_SIZE = 20;\nconst GUTTER_SIZE = GRID_SIZE / 2;\nconst ITEM_SIZE = GRID_SIZE * 2;\n\nconst options = [\n  { label: \"Hillary Clinton\" },\n  { label: \"George Washington\" },\n  { label: \"Barack Obama\" },\n  { label: \"Bernie Sanders\" },\n  { label: \"John Adams\" },\n  { label: \"Marco Rubio\" },\n  { label: \"Donald Trump\" },\n  { label: \"Ron Swanson\" },\n  { label: \"Ron Burgandy\" },\n  { label: \"Abraham Lincoln\" },\n  { label: \"Jeb Bush\" },\n  { label: \"Kanye West\" }\n];\n\n// Reorder the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\nconst getItemStyle = (isDragging, draggableStyle, isLastItem) => ({\n  position: \"relative\",\n  userSelect: \"none\",\n  // Change background color if dragging\n  background: isDragging || isLastItem ? \"transparent\" : \"#d8d8d8\",\n  border: isDragging || isLastItem ? \"2px dashed #d8d8d8\" : \"2px solid #d8d8d8\",\n  // Styles to apply on draggables\n  ...draggableStyle\n});\nconst iconStyles = {\n  width: ICON_SIZE,\n  height: ICON_SIZE,\n  viewBox: `0 0 ${ICON_SIZE} ${ICON_SIZE}`\n};\nconst moveIconStyles = {\n  ...iconStyles,\n  position: \"absolute\",\n  left: -ICON_SIZE - ICON_MARGIN,\n  top: GRID_SIZE,\n  stroke: \"#2C5C6C\"\n};\nconst plusIconStyles = {\n  ...iconStyles,\n  stroke: \"#FFFFFF\"\n};\nconst optionStyles = {\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  fontWeight: \"bold\",\n  cursor: \"pointer\",\n  borderRadius: 3,\n  margin: `${GUTTER_SIZE}px ${GRID_SIZE}px 0 ${GRID_SIZE}px`,\n  padding: `${GUTTER_SIZE}px 0 ${GUTTER_SIZE}px ${GUTTER_SIZE}px`\n};\n\nconst ArrowIcon = ({ show }) => {\n  return (\n    <svg\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      style={{\n        ...moveIconStyles,\n        opacity: show ? 1 : 0\n      }}\n    >\n      <polyline points=\"3.7 7.3 1 10 3.7 12.7\" />\n      <polyline points=\"7.3 3.7 10 1 12.7 3.7\" />\n      <polyline points=\"12.7 16.3 10 19 7.3 16.3\" />\n      <polyline points=\"16.3 7.3 19 10 16.3 12.7\" />\n      <path d=\"M1,10 L19,10\" />\n      <path d=\"M10,1 L10,19\" />\n    </svg>\n  );\n};\n\nconst PlusIcon = () => (\n  <svg\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    style={plusIconStyles}\n  >\n    <path d=\"M10,1 L10,19\" />\n    <path d=\"M1,10 L19,10\" />\n  </svg>\n);\n\nclass App extends React.PureComponent<Props, State> {\n  state = {\n    items: [],\n    options: [],\n    submitted: false\n  };\n\n  container = createRef();\n\n  componentDidMount() {\n    this.keyGenerationIndex = 1;\n    this.setOptions(options);\n  }\n\n  setOptions = choices => {\n    const options = choices.map((c, i) => ({\n      id: `option-${i}`,\n      label: c.label,\n      selected: false,\n      showMovableIcon: false,\n      val: SKIP_VALUE\n    }));\n    this.setState({\n      items: [options[0]], // Start with one option (select menu)\n      options\n    });\n  };\n\n  handleDragEnd = dragEvent => {\n    const {\n      container: { current: container }\n    } = this;\n    const { destination, source, draggableId } = dragEvent;\n    const menu = container.querySelector(`#${draggableId} select`);\n    // Convert NodeList to array\n    const menus = Array.from(container.querySelectorAll(\"select\"));\n    const preventReorder =\n      menu.value === SKIP_VALUE ||\n      menus.some(\n        (m, i) =>\n          m.value === SKIP_VALUE && destination && destination.index === i\n      );\n    // Dropped outside the list or an empty option is not last index\n    if (!destination || preventReorder) {\n      return;\n    }\n    const items = reorder(this.state.items, source.index, destination.index);\n    this.setState({ items });\n  };\n\n  handleChange = event => {\n    const { value, id } = event.target;\n    const options = [...this.state.options]; // Prevent mutation\n    const items = [...this.state.items]; // Prevent mutation\n    const menuId = parseInt(id.split(\"-\")[1]); // e.g., \"option-10\" -> \"10\"\n    const selectedItem = items[menuId];\n    // A non-default menu option was selected\n    if (value !== SKIP_VALUE) {\n      const option = options.find(o => o.id === value);\n      option.selected = true;\n      selectedItem.val = value;\n      const shouldAddItem =\n        items.length < options.length && menuId === items.length - 1; // Still menus left to append // Is the last menu item currently rendered\n      if (shouldAddItem) {\n        const newItem = this.getNewItem(options, menuId);\n        items.push(newItem);\n      }\n      const itemsAreMoveable = items.length > 2;\n      if (itemsAreMoveable) {\n        items.forEach(item => (item.showMovableIcon = item.val !== SKIP_VALUE));\n      }\n    }\n    this.setState({ options, items });\n  };\n\n  getNewItem = (options, menuId) => {\n    const newItem = { ...options[menuId + 1] }; // Copy of next option, prevent mutation\n    newItem.id = `option-${options.length + this.keyGenerationIndex}`;\n    this.keyGenerationIndex++;\n    return newItem;\n  };\n\n  handleDeselect = event => {\n    const { id } = event.currentTarget; // Selects \"this\" element instead of any of its children\n    const options = [...this.state.options]; // Prevent mutation\n    const items = [...this.state.items]; // Prevent mutation\n    const menuId = parseInt(id.split(\"-\")[1]);\n    const item = items[menuId];\n    const itemId = parseInt(item.val.split(\"-\")[1]);\n    const option = options[itemId];\n    if (!option) {\n      return;\n    }\n    item.showMovableIcon = false;\n    item.val = SKIP_VALUE;\n    option.selected = false;\n    // Remove any extra deselected items from end of list\n    items.forEach((item, i) => {\n      if (i !== menuId && item.val === SKIP_VALUE) {\n        items.splice(i, 1);\n      }\n    });\n    // Move deselected item to end of list\n    items.splice(menuId, 1);\n    const newItem = this.getNewItem(options, menuId);\n    items.push(newItem);\n    this.setState({ options, items });\n  };\n\n  handleSubmit = () => {\n    this.setState({ submitted: !this.state.submitted });\n  };\n\n  render() {\n    const isLastItem = (item, index) =>\n      !item.showMovableIcon && // Not selected\n      index === this.state.items.length - 1 && // Last item\n      this.state.items.length !== 1; // More than one available option\n    return (\n      <div ref={this.container}>\n        <Box width=\"100%\" height=\"100%\" maxWidth=\"450px\" m=\"0 auto\">\n          <Box my={2} alignItems=\"center\">\n            <Text fontSize={5} fontWeight=\"bold\" textAlign=\"center\">\n              Choose your favorite candidates\n            </Text>\n          </Box>\n          <Box width=\"100%\" alignItems=\"center\">\n            <DragDropContext onDragEnd={this.handleDragEnd}>\n              <Droppable droppableId=\"droppable\">\n                {(provided, snapshot) => (\n                  <div ref={provided.innerRef}>\n                    {this.state.items.map((item, i) => (\n                      <Draggable key={item.id} draggableId={item.id} index={i}>\n                        {(provided, snapshot) => (\n                          <div\n                            id={item.id}\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            style={{\n                              ...getItemStyle(\n                                snapshot.isDragging,\n                                provided.draggableProps.style,\n                                isLastItem(item, i)\n                              ),\n                              ...optionStyles\n                            }}\n                          >\n                            {!isLastItem(item, i) && (\n                              <ArrowIcon show={item.showMovableIcon} />\n                            )}\n                            <Label\n                              value={isLastItem(item, i) ? \"+\" : i + 1}\n                              htmlFor={`menu-${i}`}\n                              color=\"white\"\n                              mt={1}\n                            >\n                              <BoxBorder\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                                width={ITEM_SIZE}\n                                height={ITEM_SIZE}\n                                bg=\"brand\"\n                                mr={GUTTER_SIZE}\n                                borderRadius=\"50%\"\n                              >\n                                {isLastItem(item, i) ? <PlusIcon /> : i + 1}\n                              </BoxBorder>\n                            </Label>\n                            <Box\n                              flex={1}\n                              alignItems=\"center\"\n                              justifyContent=\"center\"\n                            >\n                              <Select\n                                id={`menu-${i}`}\n                                name={`menu-${i}`}\n                                onChange={this.handleChange}\n                                pr=\"20px\"\n                              >\n                                <Select.Option\n                                  id={SKIP_VALUE}\n                                  value={SKIP_VALUE}\n                                  defaultValue\n                                  disabled={item.val !== SKIP_VALUE}\n                                >\n                                  {DEFAULT_OPTION}\n                                </Select.Option>\n                                {this.state.options.map(\n                                  ({ label, id, selected }) =>\n                                    (!selected || item.val === id) && (\n                                      <Select.Option\n                                        key={id}\n                                        id={id}\n                                        value={id}\n                                      >\n                                        {label}\n                                      </Select.Option>\n                                    )\n                                )}\n                              </Select>\n                            </Box>\n                            <Box\n                              id={`deselect-${i}`}\n                              onClick={this.handleDeselect}\n                              alignItems=\"center\"\n                              justifyContent=\"center\"\n                              px={2}\n                            >\n                              {!isLastItem(item, i) &&\n                                this.state.items.length > 1 && <CrossIcon />}\n                            </Box>\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n            <Box my={3}>\n              <Button onSubmit={this.handleSubmit}>Submit</Button>\n            </Box>\n          </Box>\n        </Box>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  createRenderer,\n  Provider,\n  ThemeProvider,\n} from '@mentimeter/ragnar-react';\nimport { designSystemConfig } from '@mentimeter/ragnar-dsc';\nimport * as fonts from '@mentimeter/ragnar-fonts';\nimport { reset, setup } from '@mentimeter/ragnar-reset';\nimport App from './App';\n\nconst renderer = createRenderer();\nrenderer.renderStatic(reset(setup(`body, #root`)));\n\nObject.keys(fonts).forEach(key => {\n  renderer.renderFont('Gilroy', fonts[key].files, fonts[key].style);\n});\n\nReactDOM.render(\n  <Provider renderer={renderer}>\n    <ThemeProvider theme={designSystemConfig}>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}