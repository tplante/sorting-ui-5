{"version":3,"sources":["App.js","index.js"],"names":["SKIP_VALUE","options","label","reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","removed","Object","slicedToArray","moveIconStyles","position","left","padding","concat","ArrowIcon","react","stroke","strokeWidth","strokeLinecap","strokeLinejoin","width","height","viewBox","style","points","d","PlusIcon","App","state","items","submitted","container","createRef","setOptions","choices","map","c","i","id","selected","showMovableIcon","val","_this","setState","handleDragEnd","dragEvent","assertThisInitialized","current","destination","source","draggableId","menu","querySelector","menus","querySelectorAll","preventReorder","value","some","m","index","handleChange","event","target","_event$target","previousValue","toConsumableArray","menuId","parseInt","split","selectedItem","find","o","length","newItem","getNewItem","push","forEach","item","objectSpread","keyGenerationIndex","handleDeselect","currentTarget","option","handleSubmit","this","_this2","isLastItem","ragnar_web_dist","ref","alignItems","maxWidth","my","fontSize","fontWeight","textAlign","react_beautiful_dnd_esm","onDragEnd","droppableId","provided","innerRef","key","snapshot","assign","draggableProps","dragHandleProps","flexDirection","justifyContent","mb","GRID_SIZE","bg","isDragging","borderRadius","p","draggableStyle","userSelect","overflow","border","getItemStyle","App_ArrowIcon","htmlFor","color","mt","mr","borderColor","App_PlusIcon","flex","name","onChange","pr","Option","defaultValue","disabled","_ref","onClick","px","ragnar_visuals_dist","placeholder","onSubmit","React","renderer","createRenderer","renderStatic","reset","setup","keys","fonts","renderFont","files","ReactDOM","render","react_default","a","createElement","dist","theme","designSystemConfig","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.68555df2.chunk.js","sourcesContent":["// @flow\nimport * as React from \"react\";\nimport { createRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// Redux\nimport {\n  Box,\n  BoxBorder,\n  Button,\n  Label,\n  Select,\n  Text\n} from \"@mentimeter/ragnar-web\";\nimport { CrossIcon } from \"@mentimeter/ragnar-visuals\";\n\nconst SKIP_VALUE = \"skip\";\nconst DEFAULT_OPTION = \"Select an option\";\nconst ICON_SIZE = 20;\nconst ICON_MARGIN = 5;\nconst GRID_SIZE = 20;\nconst GUTTER_SIZE = GRID_SIZE / 2;\nconst ITEM_SIZE = GRID_SIZE * 2;\nconst SHADE_2 = \"rgb(195, 200, 213)\";\nconst SHADE_3 = \"rgb(37, 43, 54)\";\n\nconst options = [\n  { label: \"Hillary Clinton\" },\n  { label: \"George Washington\" },\n  { label: \"Barack Obama\" },\n  { label: \"Bernie Sanders\" },\n  { label: \"John Adams\" },\n  { label: \"Marco Rubio\" },\n  { label: \"Donald Trump\" },\n  { label: \"Ron Swanson\" },\n  { label: \"Ron Burgandy\" },\n  { label: \"Abraham Lincoln\" },\n  { label: \"Jeb Bush\" },\n  { label: \"Kanye West\" }\n];\n\n// Reorder the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\nconst getItemStyle = (isDragging, draggableStyle, isLastItem) => ({\n  position: \"relative\",\n  userSelect: \"none\",\n  overflow: \"visible\",\n  border:\n    isDragging || isLastItem ? `2px dashed ${SHADE_2}` : `2px solid ${SHADE_2}`,\n  // Styles to apply on draggables\n  ...draggableStyle\n});\nconst moveIconStyles = {\n  position: \"absolute\",\n  left: -ICON_SIZE - 2 * ICON_MARGIN,\n  padding: `${GRID_SIZE}px ${ICON_MARGIN}px`\n};\n\nconst ArrowIcon = () => {\n  return (\n    <svg\n      stroke={SHADE_3}\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      width={ICON_SIZE}\n      height={ICON_SIZE}\n      viewBox={`0 0 ${ICON_SIZE} ${ICON_SIZE}`}\n      style={moveIconStyles}\n    >\n      <polyline points=\"3.7 7.3 1 10 3.7 12.7\" />\n      <polyline points=\"7.3 3.7 10 1 12.7 3.7\" />\n      <polyline points=\"12.7 16.3 10 19 7.3 16.3\" />\n      <polyline points=\"16.3 7.3 19 10 16.3 12.7\" />\n      <path d=\"M1,10 L19,10\" />\n      <path d=\"M10,1 L10,19\" />\n    </svg>\n  );\n};\n\nconst PlusIcon = () => (\n  <svg\n    stroke=\"white\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    width={ICON_SIZE}\n    height={ICON_SIZE}\n    viewBox={`0 0 ${ICON_SIZE} ${ICON_SIZE}`}\n  >\n    <path d=\"M10,1 L10,19\" />\n    <path d=\"M1,10 L19,10\" />\n  </svg>\n);\n\nclass App extends React.PureComponent<Props, State> {\n  state = {\n    items: [],\n    options: [],\n    submitted: false\n  };\n\n  container = createRef();\n\n  componentDidMount() {\n    this.keyGenerationIndex = 1;\n    this.setOptions(options);\n  }\n\n  setOptions = choices => {\n    const options = choices.map((c, i) => ({\n      id: `option-${i}`,\n      label: c.label,\n      selected: false,\n      showMovableIcon: false,\n      val: SKIP_VALUE\n    }));\n    this.setState({\n      items: [options[0]], // Start with one option (select menu)\n      options\n    });\n  };\n\n  handleDragEnd = dragEvent => {\n    const {\n      container: { current: container }\n    } = this;\n    const { destination, source, draggableId } = dragEvent;\n    const menu = container.querySelector(`#${draggableId} select`);\n    // Convert NodeList to array\n    const menus = Array.from(container.querySelectorAll(\"select\"));\n    const preventReorder =\n      menu.value === SKIP_VALUE ||\n      menus.some(\n        (m, i) =>\n          m.value === SKIP_VALUE && destination && destination.index === i\n      );\n    // Dropped outside the list or an empty option is not last index\n    if (!destination || preventReorder) {\n      return;\n    }\n    const items = reorder(this.state.items, source.index, destination.index);\n    this.setState({ items });\n  };\n\n  handleChange = event => {\n    const {\n      target,\n      target: { value, id, previousValue }\n    } = event;\n    const options = [...this.state.options]; // Prevent mutation\n    const items = [...this.state.items]; // Prevent mutation\n    const menuId = parseInt(id.split(\"-\")[1]); // e.g., \"option-10\" -> \"10\"\n    const selectedItem = items[menuId];\n    // Option was selected before\n    if (previousValue) {\n      const previousOption = options.find(o => o.id === previousValue);\n      previousOption.selected = false;\n    }\n    // A non-default menu option was selected\n    if (value !== SKIP_VALUE) {\n      const option = options.find(o => o.id === value);\n      option.selected = true;\n      selectedItem.val = value;\n      const shouldAddItem =\n        items.length < options.length && menuId === items.length - 1; // Still menus left to append // Is the last menu item currently rendered\n      if (shouldAddItem) {\n        const newItem = this.getNewItem(options, menuId);\n        items.push(newItem);\n      }\n      const itemsAreMoveable = items.length > 2;\n      if (itemsAreMoveable) {\n        items.forEach(item => (item.showMovableIcon = item.val !== SKIP_VALUE));\n      }\n    }\n    target.previousValue = value;\n    this.setState({ options, items });\n  };\n\n  getNewItem = (options, menuId) => {\n    const newItem = { ...options[menuId + 1] }; // Copy of next option, prevent mutation\n    newItem.id = `option-${options.length + this.keyGenerationIndex}`;\n    this.keyGenerationIndex++;\n    return newItem;\n  };\n\n  handleDeselect = event => {\n    const { id } = event.currentTarget; // Selects \"this\" element instead of any of its children\n    const options = [...this.state.options]; // Prevent mutation\n    const items = [...this.state.items]; // Prevent mutation\n    const menuId = parseInt(id.split(\"-\")[1]);\n    const item = items[menuId];\n    const itemId = parseInt(item.val.split(\"-\")[1]);\n    const option = options[itemId];\n    if (!option) {\n      return;\n    }\n    option.selected = false;\n    // Remove any extra deselected items from end of list\n    items.forEach((item, i) => {\n      if (i !== menuId && item.val === SKIP_VALUE) {\n        items.splice(i, 1);\n      }\n    });\n    // Move deselected item to end of list\n    const newItem = this.getNewItem(options, menuId);\n    newItem.val = SKIP_VALUE;\n    newItem.showMovableIcon = false;\n    items.splice(menuId, 1);\n    items.push(newItem);\n    this.setState({ options, items });\n  };\n\n  handleSubmit = () => {\n    this.setState({ submitted: !this.state.submitted });\n  };\n\n  render() {\n    const isLastItem = (item, index) =>\n      !item.showMovableIcon && // Not selected\n      index === this.state.items.length - 1 && // Last item\n      this.state.items.length !== 1; // More than one available option\n    return (\n      <Box ref={this.container} alignItems=\"center\">\n        <Box width=\"80%\" maxWidth=\"350px\">\n          <Box my={2} alignItems=\"center\">\n            <Text fontSize={5} fontWeight=\"bold\" textAlign=\"center\">\n              Choose your favorite candidates\n            </Text>\n          </Box>\n          <Box width=\"100%\" alignItems=\"center\">\n            <DragDropContext onDragEnd={this.handleDragEnd}>\n              <Droppable droppableId=\"droppable\">\n                {provided => (\n                  <Box ref={provided.innerRef} width=\"100%\" alignItems=\"center\">\n                    {this.state.items.map((item, i) => (\n                      <Draggable key={item.id} draggableId={item.id} index={i}>\n                        {(provided, snapshot) => (\n                          <BoxBorder\n                            id={item.id}\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            width=\"100%\"\n                            height=\"100%\"\n                            flexDirection=\"columns\"\n                            alignItems=\"center\"\n                            justifyContent=\"space-between\"\n                            mb={GUTTER_SIZE}\n                            // Change background color if dragging\n                            bg={\n                              snapshot.isDragging || isLastItem(item, i)\n                                ? \"transparent\"\n                                : \"shade-2\"\n                            }\n                            borderRadius={1}\n                            p={`${GUTTER_SIZE}px 0 ${GUTTER_SIZE}px ${GUTTER_SIZE}px`}\n                            style={{\n                              ...getItemStyle(\n                                snapshot.isDragging,\n                                provided.draggableProps.style,\n                                isLastItem(item, i)\n                              )\n                            }}\n                          >\n                            {!isLastItem(item, i) &&\n                              item.showMovableIcon && <ArrowIcon />}\n                            <Label\n                              value={isLastItem(item, i) ? \"+\" : i + 1}\n                              htmlFor={`menu-${i}`}\n                              color=\"white\"\n                              mt={1}\n                              fontWeight=\"bold\"\n                            >\n                              <BoxBorder\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                                width={ITEM_SIZE}\n                                height={ITEM_SIZE}\n                                bg={isLastItem(item, i) ? \"shade-2\" : \"brand\"}\n                                mr={GUTTER_SIZE}\n                                borderRadius=\"50%\"\n                                border=\"2px solid\"\n                                borderColor=\"gray\"\n                              >\n                                {isLastItem(item, i) ? <PlusIcon /> : i + 1}\n                              </BoxBorder>\n                            </Label>\n                            <Box\n                              flex={1}\n                              alignItems=\"center\"\n                              justifyContent=\"center\"\n                            >\n                              <Select\n                                id={`menu-${i}`}\n                                name={`menu-${i}`}\n                                onChange={this.handleChange}\n                                pr=\"20px\"\n                              >\n                                <Select.Option\n                                  id={SKIP_VALUE}\n                                  value={SKIP_VALUE}\n                                  defaultValue\n                                  disabled={item.val !== SKIP_VALUE}\n                                >\n                                  {DEFAULT_OPTION}\n                                </Select.Option>\n                                {this.state.options.map(\n                                  ({ label, id, selected }) =>\n                                    (!selected || item.val === id) && (\n                                      <Select.Option\n                                        key={id}\n                                        id={id}\n                                        value={id}\n                                      >\n                                        {label}\n                                      </Select.Option>\n                                    )\n                                )}\n                              </Select>\n                            </Box>\n                            <Box\n                              id={`deselect-${i}`}\n                              onClick={this.handleDeselect}\n                              alignItems=\"center\"\n                              justifyContent=\"center\"\n                              px={2}\n                            >\n                              {!isLastItem(item, i) &&\n                                this.state.items.length > 1 && <CrossIcon />}\n                            </Box>\n                          </BoxBorder>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </Box>\n                )}\n              </Droppable>\n            </DragDropContext>\n            <Box my={3}>\n              <Button onSubmit={this.handleSubmit}>Submit</Button>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  createRenderer,\n  Provider,\n  ThemeProvider,\n} from '@mentimeter/ragnar-react';\nimport { designSystemConfig } from '@mentimeter/ragnar-dsc';\nimport * as fonts from '@mentimeter/ragnar-fonts';\nimport { reset, setup } from '@mentimeter/ragnar-reset';\nimport App from './App';\n\nconst renderer = createRenderer();\nrenderer.renderStatic(reset(setup(`body, #root`)));\n\nObject.keys(fonts).forEach(key => {\n  renderer.renderFont('Gilroy', fonts[key].files, fonts[key].style);\n});\n\nReactDOM.render(\n  <Provider renderer={renderer}>\n    <ThemeProvider theme={designSystemConfig}>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}